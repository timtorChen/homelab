---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  namespace: grafana
  name: grafana-app-policy
specs:
  # allow connection from ingress-nginx
  - endpointSelector: &self
      matchLabels:
        app.kubernetes.io/name: grafana
    ingress:
      - fromEndpoints:
          - matchLabels:
              k8s:io.kubernetes.pod.namespace: ingress-nginx
        toPorts:
          - ports:
              - protocol: TCP
                port: "3000"
  # allow grafana to resolve dns records
  - endpointSelector:
      matchLabels:
        app.kubernetes.io/name: mimir
    egress:
      - toEndpoints:
          - matchLabels:
              k8s:io.kubernetes.pod.namespace: kube-system
              k8s-app: kube-dns
        toPorts:
          - ports:
              - protocol: ANY
                port: "53"
            rules:
              dns:
                - matchName: grafana.com
                - matchName: grafana.net
                - matchName: storage.googleapis.com
                - matchName: oauth.id.jumpcloud.com
                - matchName: "mimir-query-frontend.mimir.svc.cluster.local."
                - matchName: "loki-read.loki.svc.cluster.local."
                - matchName: "grafana-postgres-rw.svc.cluster.local."
  # allow plugin and SSO
  - endpointSelector: *self
    egress:
      - toFQDNs:
          - matchName: grafana.com
          - matchName: grafana.net
          - matchName: storage.googleapis.com
          - matchName: oauth.id.jumpcloud.com
        toPorts:
          - ports:
              - protocol: TCP
                port: "443"
  # allow gossip-ring between grafana pods
  - endpointSelector: *self
    ingress:
      - fromEndpoints:
          - *self
        toPorts:
          - ports:
              - protocol: ANY
                port: "9094"
    egress:
      - toEndpoints:
          - *self
        toPorts:
          - ports:
              - protocol: ANY
                port: "9094"
  # allow grafana metrics from prometheus
  - endpointSelector: *self
    ingress:
      - fromEndpoints:
          - matchLabels:
              k8s:io.kubernetes.pod.namespace: kube-prometheus-stack
        toPorts:
          - ports:
              - protocol: TCP
                port: "3000"
  # allow connection to loki, mimir and postgres
  - endpointSelector: *self
    egress:
      - toEndpoints:
          - matchLabels:
              k8s:io.kubernetes.pod.namespace: kube-system
              k8s-app: kube-dns
        toPorts:
          - ports:
              - protocol: ANY
                port: "53"
            rules:
              dns:
                # TODO: loki-read, mimir-read and postgres-rw
                - matchPattern: "*"
  - endpointSelector: *self
    egress:
      - toEndpoints:
          - matchLabels:
              cnpg.io/cluster: grafana-postgres
        toPorts:
          - ports:
              - protocol: TCP
                port: "5432"
      - toEndpoints:
          - matchLabels:
              k8s:io.kubernetes.pod.namespace: mimir
              app.kubernetes.io/component: query-frontend
        toPorts:
          - ports:
              - protocol: TCP
                port: "8080"
      - toEndpoints:
          - matchLabels:
              k8s:io.kubernetes.pod.namespace: loki
              app.kubernetes.io/component: read
        toPorts:
          - ports:
              - protocol: TCP
                port: "3100"

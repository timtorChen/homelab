---
version: "3"

tasks:
  # -- AWS
  aws:get-talos-secrets:
    silent: true
    env:
      SECRET_ENV: &talos-secret
        sh: |
          VALUES="$(aws ssm get-parameters --with-decryption \
            --names /amethyst/talos-machine /amethyst/talos-cluster)"
          echo "$VALUES" | jq -r '.Parameters[].Value | fromjson | to_entries[] | "\(.key)=\(.value)"'
    cmd: echo "$SECRET_ENV"

  # -- Talos
  # controlplane
  talos:apply-controlplane:
    silent: true
    cmds:
      - for: [pi4b-1, pi4b-2, pi4b-3]
        vars:
          DIR: talos
          NODE: "{{.ITEM}}"
          SECRET_ENV: *talos-secret
        task: talos:apply
  talos:upgrade-controlplane:
    silent: true
    cmds:
      - for: [pi4b-1, pi4b-2, pi4b-3]
        vars:
          DIR: talos
          NODE: "{{.ITEM}}"
          SECRET_ENV: *talos-secret
        task: talos:upgrade
  # worker
  talos:apply-worker:
    silent: true
    cmds:
      - for: [nuc11tnhi50l-1, nuc11tnhi50l-2, nuc11tnhi50l-3]
        vars:
          DIR: talos
          NODE: "{{.ITEM}}"
          SECRET_ENV: *talos-secret
        task: talos:apply
  talos:upgrade-worker:
    silent: true
    cmds:
      - for: [nuc11tnhi50l-1, nuc11tnhi50l-2, nuc11tnhi50l-3]
        vars:
          DIR: talos
          NODE: "{{.ITEM}}"
          SECRET_ENV: *talos-secret
        task: talos-upgrade

  # pi4b-1
  talos:render-pi4b-1:
    cmds:
      - task: talos:render
        vars: &pi4b-1-vars
          DIR: talos
          NODE: pi4b-1
          SECRET_ENV: *talos-secret
  talos:plan-pi4b-1:
    cmds:
      - task: talos:plan
        vars: *pi4b-1-vars
  talos:apply-pi4b-1:
    cmds:
      - task: talos:apply
        vars: *pi4b-1-vars
  talos:upgrade-pi4b-1:
    cmds:
      - task: talos:upgrade
        vars: *pi4b-1-vars
  talos:reset-pi4b-1:
    cmds:
      - task: talos:reset
        vars:
          DIR: talos
          NODE: pi4b-1

  # pi4b-2
  talos:render-pi4b-2:
    cmds:
      - task: talos:render
        vars: &pi4b-2-vars
          DIR: talos
          NODE: pi4b-2
          SECRET_ENV: *talos-secret
  talos:plan-pi4b-2:
    cmds:
      - task: talos:plan
        vars: *pi4b-2-vars
  talos:apply-pi4b-2:
    cmds:
      - task: talos:apply
        vars: *pi4b-2-vars
  talos:upgrade-pi4b-2:
    cmds:
      - task: talos:upgrade
        vars: *pi4b-2-vars
  talos:reset-pi4b-2:
    cmds:
      - task: talos:reset
        vars:
          DIR: talos
          NODE: pi4b-2

  # pi4b-3
  talos:render-pi4b-3:
    cmds:
      - task: talos:render
        vars: &pi4b-3-vars
          DIR: talos
          NODE: pi4b-3
          SECRET_ENV: *talos-secret
  talos:plan-pi4b-3:
    cmds:
      - task: talos:plan
        vars: *pi4b-3-vars
  talos:apply-pi4b-3:
    cmds:
      - task: talos:apply
        vars: *pi4b-3-vars
  talos:upgrade-pi4b-3:
    cmds:
      - task: talos:upgrade
        vars: *pi4b-3-vars
  talos:reset-pi4b-3:
    cmds:
      - task: talos:reset
        vars:
          DIR: talos
          NODE: pi4b-3

  # nuc11tnhi50l-1
  talos:render-nuc11tnhi50l-1:
    cmds:
      - task: talos:render
        vars: &nuc11tnhi50l-1-vars
          DIR: talos
          NODE: nuc11tnhi50l-1
          SECRET_ENV: *talos-secret
  talos:plan-nuc11tnhi50l-1:
    cmds:
      - task: talos:plan
        vars: *nuc11tnhi50l-1-vars
  talos:apply-nuc11tnhi50l-1:
    cmds:
      - task: talos:apply
        vars: *nuc11tnhi50l-1-vars
  talos:upgrade-nuc11tnhi50l-1:
    cmds:
      - task: talos:upgrade
        vars: *nuc11tnhi50l-1-vars
  talos:reset-nuc11tnhi50l-1:
    cmds:
      - task: talos:reset
        vars:
          DIR: talos
          NODE: nuc11tnhi50l-1

  # nuc11tnhi50l-2
  talos:render-nuc11tnhi50l-2:
    cmds:
      - task: talos:render
        vars: &nuc11tnhi50l-2-vars
          DIR: talos
          NODE: nuc11tnhi50l-2
          SECRET_ENV: *talos-secret
  talos:plan-nuc11tnhi50l-2:
    cmds:
      - task: talos:plan
        vars: *nuc11tnhi50l-2-vars
  talos:apply-nuc11tnhi50l-2:
    cmds:
      - task: talos:apply
        vars: *nuc11tnhi50l-2-vars
  talos:upgrade-nuc11tnhi50l-2:
    cmds:
      - task: talos:upgrade
        vars: *nuc11tnhi50l-2-vars
  talos:reset-nuc11tnhi50l-2:
    cmds:
      - task: talos:reset
        vars:
          DIR: talos
          NODE: nuc11tnhi50l-2

  # nuc11tnhi50l-3
  talos:render-nuc11tnhi50l-3:
    cmds:
      - task: talos:render
        vars: &nuc11tnhi50l-3-vars
          DIR: talos
          NODE: nuc11tnhi50l-3
          SECRET_ENV: *talos-secret
  talos:plan-nuc11tnhi50l-3:
    cmds:
      - task: talos:plan
        vars: *nuc11tnhi50l-3-vars
  talos:apply-nuc11tnhi50l-3:
    cmds:
      - task: talos:apply
        vars: *nuc11tnhi50l-3-vars
  talos:upgrade-nuc11tnhi50l-3:
    cmds:
      - task: talos:upgrade
        vars: *nuc11tnhi50l-3-vars
  talos:reset-nuc11tnhi50l-3:
    cmds:
      - task: talos:reset
        vars:
          DIR: talos
          NODE: nuc11tnhi50l-3

  # -- Kubernetes
  # yamllint disable rule:line-length
  kubernetes:init:
    silent: true
    cmds:
      - echo "Install Cilium on kube-system/cilium (helm)"
      - |
        helm upgrade --install cilium cilium/cilium \
        --namespace kube-system \
        --version 1.14.0-snapshot.4 \
        --set ipam.mode=kubernetes \
        --set kubeProxyReplacement=strict \
        --set securityContext.capabilities.ciliumAgent="{CHOWN,KILL,NET_ADMIN,NET_RAW,IPC_LOCK,SYS_ADMIN,SYS_RESOURCE,DAC_OVERRIDE,FOWNER,SETGID,SETUID}" \
        --set securityContext.capabilities.cleanCiliumState="{NET_ADMIN,SYS_ADMIN,SYS_RESOURCE}" \
        --set cgroup.autoMount.enabled=false \
        --set cgroup.hostRoot=/sys/fs/cgroup \
        --set k8sServiceHost="localhost" \
        --set k8sServicePort="7745"

      - echo "Install Flux on flux-system namespace (manifests)"
      # flux install creates a flux-system namespace
      - flux install --version v2.0.0-rc.5
      - kubectl apply -f ./kubernetes/flux-system/boostrap.yaml

  # yamllint enable
  # yamllint disable rule:line-length
  kubernetes:pv:delete-unused:
    silent: true
    prompt: "Delete of all unused Persistence Volume and its data... contiune?"
    cmds:
      - |
        kubectl get pv -o yaml | \
        yq '.items[] | select(.status.phase != "Bound" ) | .spec.persistentVolumeReclaimPolicy = "Delete" | split_doc' | \
        kubectl apply -f -
  # yamllint enable
  kubernetes:ceph:debug:
    silent: true
    cmd: kubectl exec -it -n rook-ceph deployment/toolbox -- /bin/bash

  kubernetes:ceph:crash:ls:
    silent: true
    cmd: kubectl exec -it -n rook-ceph deployment/toolbox -- ceph crash ls

  kubernetes:vautwarden:backup:
    silent: true
    cmd: restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-vaultwarden

  kubernetes:navidrome:backup:
    silent: true
    cmds:
      - echo "Data backup:"
      - restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-navidrome/data
      - echo "Database backup:"
      - restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-navidrome/db

  kubernetes:immich:backup:
    silent: true
    cmds:
      - echo "Data backup:"
      - restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-immich/app
      # TODO: database backup list

  kubernetes:nextcloud:backup:
    silent: true
    cmds:
      - echo "Install backup:"
      - restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-nextcloud/install
      - echo "Data backup:"
      - restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-nextcloud/data
      # TODO: database backup list

  kubernetes:get-oidc-config:
    silent: true
    env:
      CONFIG: &oidc-config
        sh: |
          kubectl get --raw /.well-known/openid-configuration |\
          jq '.jwks_uri= .issuer + "/.well-known/jwks"'
    cmds:
      - echo "$CONFIG"

  kubernetes:get-oidc-jwks:
    silent: true
    env:
      JWKS: &oidc-jwks
        sh: |
          kubectl get --raw /openid/v1/jwks | jq
    cmds:
      - echo "$JWKS"

  kubernetes:set-public-oidc:
    silent: true
    env:
      CONFIG: *oidc-config
      JWKS: *oidc-jwks
    cmds:
      - echo "Uploading openid-configuration to S3"
      - echo "$CONFIG" | aws s3 cp - s3://amethyst-kubernetes-oidc/.well-known/openid-configuration
      - echo "Uploading JWKs to S3"
      - echo "$JWKS" | aws s3 cp - s3://amethyst-kubernetes-oidc/.well-known/jwks

  # -- Terraform
  terraform:remote-state:init:
    dir: terraform/_remote-state
    cmd: terraform init

  terraform:remote-state:plan:
    dir: terraform/_remote-state
    cmd: terraform plan

  terraform:remote-state:apply:
    dir: terraform
    cmd: terraform apply

  terraform:remote-state:output:
    cmd: terraform output

  terraform:init:
    dir: terraform
    cmd: terraform init

  terraform:plan:
    dir: terraform
    cmd: terraform plan

  terraform:apply:
    dir: terraform
    cmd: terraform apply

  terraform:output:
    cmd: terraform output

  # -- Functions
  talos:render:
    internal: true
    silent: true
    dir: "{{.DIR}}"
    cmd: &talos-render-config |
      NODE="{{.NODE}}"
      SECRET_ENV="{{.SECRET_ENV}}"

      [ ! -f "${NODE}.yaml" ] && echo "Clound find ${NODE}.yaml" && exit 1
      HEADER="$(yq 'head_comment' "${NODE}.yaml")"
      IP="$(echo "$HEADER" | yq '.ip')"
      INCLUDES="$(echo "$HEADER"| yq '.includes[]')"

      [ "$IP" == "null" ] && echo "Please add '# ip:' comment header on ${NODE}.yaml" && exit 1
      CONFIG="$(yq ea '. as $item ireduce ({}; . * $item)' $INCLUDES "${NODE}.yaml")"
      export $SECRET_ENV
      echo "$CONFIG" | envsubst

  talos:plan:
    internal: true
    silent: true
    ignore_error: true
    dir: "{{.DIR}}"
    env:
      CONFIG:
        sh: *talos-render-config
    cmd: |
      NODE="{{.NODE}}"
      HEADER="$(yq 'head_comment' "${NODE}.yaml")"
      IP="$(echo "$HEADER" | yq '.ip')"
      talosctl apply-config -n "$IP" --dry-run -f <(echo "$CONFIG")

  talos:apply:
    prompt: The apply process may cause a reboot... continue?
    internal: true
    silent: true
    dir: "{{.DIR}}"
    env:
      CONFIG:
        sh: *talos-render-config
    cmd: |
      NODE="{{.NODE}}"
      HEADER="$(yq 'head_comment' "${NODE}.yaml")"
      IP="$(echo "$HEADER" | yq '.ip')"
      talosctl apply-config -n "$IP" -f <(echo "$CONFIG")

  talos:upgrade:
    prompt: The upgrade process will cause a reboot... continue?
    silent: true
    internal: true
    dir: "{{.DIR}}"
    env:
      CONFIG:
        sh: *talos-render-config
    cmd: |
      NODE={{.NODE}}
      HEADER="$(yq 'head_comment' "${NODE}.yaml")"
      IP="$(echo "$HEADER" | yq '.ip')"
      IMAGE="$(echo "$CONFIG" | yq '.machine.install.image')"

      echo "> Apply configuration"
      talosctl apply-config -n "$IP" -f <(echo "$CONFIG")

      echo "> Start talos OS upgrade"
      talosctl upgrade --preserve --image "$IMAGE" -n "$IP"

  talos:reset:
    prompt: Reset the node and ALL data will be removed... continue?
    silent: true
    internal: true
    dir: "{{.DIR}}"
    cmd: |
      NODE="{{.NODE}}"
      HEADER="$(yq 'head_comment' "${NODE}.yaml")"
      IP="$(echo "$HEADER" | yq '.ip')"

      talosctl reset \
      --system-labels-to-wipe=STATE \
      --system-labels-to-wipe=EPHEMERAL \
      --system-labels-to-wipe=META \
      --reboot --graceful -n $IP

---
version: "3"

tasks:
  # -- Talos
  talos:apply-pi4b-1:
    cmds:
      - task: talos:apply
        vars:
          NODE: pi4b-1
  talos:upgrade-pi4b-1:
    cmds:
      - task: talos:upgrade
        vars:
          NODE: pi4b-1
  talos:apply-pi4b-2:
    cmds:
      - task: talos:apply
        vars:
          NODE: pi4b-2
  talos:upgrade-pi4b-2:
    cmds:
      - task: talos:upgrade
        vars:
          NODE: pi4b-2
  talos:apply-pi4b-3:
    cmds:
      - task: talos:apply
        vars:
          NODE: pi4b-3
  talos:upgrade-pi4b-3:
    cmds:
      - task: talos:upgrade
        vars:
          NODE: pi4b-3
  talos:apply-nuc11tnhi50l-1:
    cmds:
      - task: talos:apply
        vars:
          NODE: nuc11tnhi50l-1
  talos:upgrade-nuc11tnhi50l-1:
    cmds:
      - task: talos:upgrade
        vars:
          NODE: nuc11tnhi50l-1
  talos:apply-nuc11tnhi50l-2:
    cmds:
      - task: talos:apply
        vars:
          NODE: nuc11tnhi50l-2
  talos:upgrade-nuc11tnhi50l-2:
    cmds:
      - task: talos:upgrade
        vars:
          NODE: nuc11tnhi50l-2
  talos:apply-nuc11tnhi50l-3:
    cmds:
      - task: talos:apply
        vars:
          NODE: nuc11tnhi50l-3
  talos:upgrade-nuc11tnhi50l-3:
    cmds:
      - task: talos:upgrade
        vars:
          NODE: nuc11tnhi50l-3

  # -- Kubernetes
  # yamllint disable rule:line-length
  kubernetes:init:
    silent: true
    cmds:
      - echo "Install Cilium on kube-system/cilium (helm)"
      - |
        helm upgrade --install cilium cilium/cilium \
        --namespace kube-system \
        --version 1.14.0-snapshot.4 \
        --set ipam.mode=kubernetes \
        --set kubeProxyReplacement=strict \
        --set securityContext.capabilities.ciliumAgent="{CHOWN,KILL,NET_ADMIN,NET_RAW,IPC_LOCK,SYS_ADMIN,SYS_RESOURCE,DAC_OVERRIDE,FOWNER,SETGID,SETUID}" \
        --set securityContext.capabilities.cleanCiliumState="{NET_ADMIN,SYS_ADMIN,SYS_RESOURCE}" \
        --set cgroup.autoMount.enabled=false \
        --set cgroup.hostRoot=/sys/fs/cgroup \
        --set k8sServiceHost="localhost" \
        --set k8sServicePort="7745"

      - echo "Install Flux on flux-system namespace (manifests)"
      # flux install creates a flux-system namespace
      - flux install --version v2.0.0-rc.5
      - kubectl apply -f ./kubernetes/flux-system/boostrap.yaml

  # yamllint enable
  # yamllint disable rule:line-length
  kubernetes:pv:delete-unused:
    silent: true
    prompt: "Delete of all unused Persistence Volume and its data... contiune?"
    cmds:
      - |
        kubectl get pv -o yaml | \
        yq '.items[] | select(.status.phase != "Bound" ) | .spec.persistentVolumeReclaimPolicy = "Delete" | split_doc' | \
        kubectl apply -f -
  # yamllint enable
  kubernetes:ceph:debug:
    silent: true
    cmd: kubectl exec -it -n rook-ceph deployment/toolbox -- /bin/bash

  kubernetes:ceph:crash:ls:
    silent: true
    cmd: kubectl exec -it -n rook-ceph deployment/toolbox -- ceph crash ls

  kubernetes:vautwarden:backup:
    silent: true
    cmd: restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-vaultwarden

  kubernetes:navidrome:backup:
    silent: true
    cmds:
      - echo "Data backup:"
      - restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-navidrome/data
      - echo "Database backup:"
      - restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-navidrome/db

  kubernetes:immich:backup:
    silent: true
    cmds:
      - echo "Data backup:"
      - restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-immich/app
      # TODO: database backup list

  kubernetes:nextcloud:backup:
    silent: true
    cmds:
      - echo "Install backup:"
      - restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-nextcloud/install
      - echo "Data backup:"
      - restic snapshots -r s3://s3.us-east-005.backblazeb2.com/homelab-amethyst-nextcloud/data
      # TODO: database backup list

  # -- Terraform
  terraform:remote-state:init:
    dir: terraform/_remote-state
    cmd: terraform init

  terraform:remote-state:plan:
    dir: terraform/_remote-state
    cmd: terraform plan

  terraform:remote-state:apply:
    dir: terraform
    cmd: terraform apply

  terraform:remote-state:output:
    cmd: terraform output

  terraform:init:
    dir: terraform
    cmd: terraform init

  terraform:plan:
    dir: terraform
    cmd: terraform plan

  terraform:apply:
    dir: terraform
    cmd: terraform apply

  terraform:output:
    cmd: terraform output

  # -- Functions
  talos:apply:
    silent: true
    dir: talos
    env: &talos-env
      SECRET_ENV:
        sh: |
          export AWS_PROFILE=sso-admin@aws-homelab
          aws ssm get-parameters --with-decryption \
          --names /amethyst/talos-machine /amethyst/talos-cluster |\
          jq -r '.Parameters[].Value | fromjson | to_entries[] | "\(.key)=\(.value)"'
    cmds:
      - |
        NODE={{.NODE}}
        [ -z "$NODE" ] && echo -n "Apply node: " && read NODE
        export IP="$(yq 'head_comment' "${NODE}.yaml" | yq '.ip')"
        [ -z "$IP" ] && exit 1

        export TYPE="$(yq '.machine.type' "${NODE}.yaml")"
        export CONFIG="$(yq ea '. as $item ireduce ({}; . * $item)' "${TYPE}.yaml" "${NODE}.yaml")"
        export $SECRET_ENV
        export CONFIG="$(echo "$CONFIG" | envsubst)"
        talosctl apply-config -f <(echo -n "$CONFIG") -n "$IP" {{.CLI_ARGS}}

  talos:upgrade:
    silent: true
    dir: talos
    prompt: The upgrade process will cause a reboot... continue?
    env: *talos-env
    cmds:
      - |
        NODE={{.NODE}}
        [ -z "$NODE" ] && echo -n "Upgrade node: " && read NODE
        export IP="$(yq 'head_comment' "${NODE}.yaml" | yq '.ip')"
        [ -z "$IP" ] && exit 1

        export TYPE="$(yq '.machine.type' "${NODE}.yaml")"
        export IMAGE="$(yq '.machine.install.image' "${TYPE}.yaml")"
        export CONFIG="$(yq ea '. as $item ireduce ({}; . * $item)' "${TYPE}.yaml" "${NODE}.yaml")"
        export $SECRET_ENV
        export CONFIG="$(echo "$CONFIG" | envsubst)"

        echo "> Apply configuration"
        talosctl apply-config -f <(echo -n "$CONFIG") -n "$IP"

        echo "> Start talos OS upgrade"
        talosctl upgrade --preserve --image "$IMAGE" -n "$IP"

  talos:reset:
    silent: true
    dir: talos
    prompt: Reset the node and ALL data will be removed... continue?
    cmds:
      - |
        NODE={{.NODE}}
        [ -z "$NODE" ] && echo -n "Reset node: " && read NODE
        export IP="$(yq 'head_comment' "${NODE}.yaml" | yq '.ip')"
        [ -z "$IP" ] && exit 1
        talosctl reset \
        --system-labels-to-wipe=STATE \
        --system-labels-to-wipe=EPHEMERAL \
        --system-labels-to-wipe=META \
        --reboot --graceful -n $IP

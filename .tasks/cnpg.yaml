---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"
silent: true

tasks:
  stop:
    internal: true
    cmd: |
      NAMESPACE="{{.NAMESPACE}}"
      NAME="{{.NAME}}"

      echo "Waking up the postgres cluster $NAME"
      kubectl cnpg hibernate on -n "$NAMESPACE" "$NAME"

  start:
    internal: true
    cmd: |
      NAMESPACE="{{.NAMESPACE}}"
      NAME="{{.NAME}}"

      echo "Hibernating the postgres cluster $NAME"
      kubectl cnpg hibernate off -n "$NAMESPACE" "$NAME"

  delete:
    internal: true
    cmd: |
      NAMESPACE="{{.NAMESPACE}}"
      NAME="{{.NAME}}"
      WAIT='{{.WAIT | default "true" }}'
      TIMEOUT='{{.TIMEOUT | default "5m" }}'

      echo "Deleting the current cluster $NAME..."
      kubectl delete 'clusters.postgresql.cnpg.io' -n "$NAMESPACE" "$NAME" \
        --timeout="$TIMEOUT" --ignore-not-found=true
      echo "Deletion of $NAME is completed"

  backup:
    internal: true
    cmd: |
      NAMESPACE="{{.NAMESPACE}}"
      NAME="{{.NAME}}"
      WAIT='{{.WAIT | default "true" }}'
      TIMEOUT='{{.TIMEOUT | default "5m" }}'

      TIMESTAMP="$(date +%Y%m%d%H%M%S%z)"
      TIMESTAMP="${TIMESTAMP/+/plus}"
      TIMESTAMP="${TIMESTAMP/-/minus}"
      FULLNAME="$NAME-$TIMESTAMP"

      kubectl cnpg backup -n "$NAMESPACE" "$NAME" --backup-name "$FULLNAME"
      if [ "$WAIT" = "true" ]; then
        echo "Waiting for backup $FULLNAME..."
        kubectl wait -n "$NAMESPACE" "backups.postgresql.cnpg.io/$FULLNAME" \
          --for=jsonpath='{.status.phase}'=completed \
          --timeout="$TIMEOUT"
        kubectl delete -n "$NAMESPACE" "backups.postgresql.cnpg.io/$FULLNAME"
        echo "Backup of $FULLNAME is completed"
      fi

  pitr:
    internal: true
    interactive: true
    cmd: |
      TEMPLATE="{{.TEMPLATE}}"
      TIME="{{.TIME}}"
      WAIT='{{.WAIT | default "true" }}'
      TIMEOUT='{{.TIMEOUT | default "10m" }}'

      [ -z "$TEMPLATE" ] && echo "Please set the TEMPLATE variable" && exit
      [ -z "$TIME" ] && echo -n "Please enter the target time for postgres recovery: " && read TIME

      FORMAT="%Y-%m-%d %H:%M:%S%:::z"
      if [[ "{{OS}}" == "linux" ]]; then
        PARSE="$(date --date "$TIME" +"$FORMAT")"
        DATE="$(date -u --date "$PARSE" +"$FORMAT")"
      elif [[ "{{OS}}" == "darwin" ]]; then
        PARSE="$(gdate --date "$TIME" +"$FORMAT")"
        DATE="$(gdate -u --date "$PARSE" +"$FORMAT")"
      fi

      export DATE
      NAMESPAPE="$(yq '.metadata.namespace' "$TEMPLATE")"
      NAME="$(yq '.metadata.name' "$TEMPLATE")"
      CLUSTER_CONTENT="$(yq \
        '.spec.bootstrap.recovery.recoveryTarget.targetTime=env(DATE),
         .spec.bootstrap.recovery.recoveryTarget.targetTime style="double"
        ' "$TEMPLATE")"

      echo "$CLUSTER_CONTENT" | kubectl apply -f -
      if [ "$WAIT" == "true" ]; then
        echo "Recovering $NAME..."
        kubectl wait -n "$NAMESPAPE" "cluster/$NAME" \
          --for=jsonpath='{.status.phase}'='Cluster in healthy state' \
          --timeout="$TIMEOUT"
        echo "Recovery of $NAME is completed"
      fi

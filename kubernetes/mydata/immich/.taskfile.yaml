---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"
silent: true

includes:
  volsync:
    taskfile: ../../../.tasks/volsync.yaml
  cnpg:
    taskfile: ../../../.tasks/cnpg.yaml

tasks:
  backup:
    deps:
      - task: volsync:backup
        vars:
          TEMPLATE: maintain/data-manual-backup.tmpl.yaml
          NAMESPACE: mydata
          NAME: immich-data-backup
          TIMEOUT: 10m
      - task: cnpg:backup
        vars:
          NAMESPACE: mydata
          NAME: immich-postgres

  restore:
    prompt: |
      Immich volume is shared with nextcloud, remember to stop the nextcloud before proceeding.
      Restore will delete current immich data and database... continue?
    cmds:
      - task: stop
      - task: delete-volume
      - task: cnpg:delete
        vars:
          NAMESPACE: mydata
          NAME: immich-postgres
      - task: create-volume
      - task: cnpg:pitr
        vars:
          TEMPLATE: maintain/postgres-restore.tmpl.yaml
      - task: volsync:restore
        vars:
          TEMPLATE: maintain/data-manual-restore.tmpl.yaml
          NAMESPACE: mydata
          NAME: immich-data-restore
          TIMEOUT: 20m
      - task: start

  delete-volume:
    internal: true
    ignore_error: true
    cmd: |
      echo "Deleting vaultwarden volume claim..."
      kubectl delete -f app/pvc.yaml

  create-volume:
    internal: true
    cmd: |
      echo "Creating vaultwarden volume claim..."
      kubectl create -f app/pvc.yaml

  stop:
    cmd: |
      echo "Stopping immich..."
      kubectl scale --replicas 0 -n mydata deployment/immich-machine-learning
      kubectl scale --replicas 0 -n mydata deployment/immich-server
      kubectl scale --replicas 0 -n mydata deployment/immich-microservices

  start:
    cmd: |
      echo "Starting immich..."
      kubectl scale --replicas 1 -n mydata deployment/immich-machine-learning
      kubectl scale --replicas 1 -n mydata deployment/immich-server
      kubectl scale --replicas 1 -n mydata deployment/immich-microservices

  stop-postgres:
    cmds:
      - task: cnpg:stop
        vars:
          NAMESPACE: mydata
          NAME: immich-postgres

  start-postgres:
    cmds:
      - task: cnpg:start
        vars:
          NAMESPACE: mydata
          NAME: immich-postgres

  stop-all:
    cmds:
      - task: stop
      - task: stop-postgres

  start-all:
    cmds:
      - task: start-postgres
      - task: start

  list-backup:
    cmds:
      - task: list-data-backup
      - task: list-postgres-backup

  list-data-backup:
    env:
      BACKUP_SECRET:
        sh: |
          aws ssm get-parameter --name /kubernetes/mydata/immich/backup \
          --query "Parameter.Value" --with-decryption
      OPENDAL_ENDPOINT: "https://s3.us-east-005.backblazeb2.com"
      OPENDAL_BUCKET:
        sh: echo $BACKUP_SECRET | jq -r 'fromjson | .OPENDAL_BUCKET'
      OPENDAL_ROOT: /app
      OPENDAL_ACCESS_KEY_ID:
        sh: echo $BACKUP_SECRET | jq -r 'fromjson | .OPENDAL_ACCESS_KEY_ID'
      OPENDAL_SECRET_ACCESS_KEY:
        sh: echo $BACKUP_SECRET | jq -r 'fromjson | .OPENDAL_SECRET_ACCESS_KEY'
      RUSTIC_PASSWORD:
        sh: echo $BACKUP_SECRET | jq -r 'fromjson | .RUSTIC_PASSWORD'
    cmds:
      - |
          echo "Listing immich-data snapshots..."
          rustic snapshots -r "opendal:s3" --log-level=error

  list-postgres-backup:
    env:
      BACKUP_SECRET:
        sh: |
          aws ssm get-parameter --name /amethyst/immich-postgres \
          --query "Parameter.Value" --with-decryption
      S3_ENDPOINT_URL: https://s3.us-east-005.backblazeb2.com
      POSTGRES_REPO: s3://timtor-homelab-immich/immich-postgres/base/
      AWS_ACCESS_KEY_ID:
        sh: echo $BACKUP_SECRET | jq -r 'fromjson | .POSTGRES_B2_ACCESS_KEY_ID'
      AWS_SECRET_ACCESS_KEY:
        sh: echo $BACKUP_SECRET | jq -r 'fromjson | .POSTGRES_B2_ACCESS_SECRET_KEY'
    cmds:
      - |
          echo "Listing immich-postgres backups..."
          aws s3 ls --endpoint-url="$S3_ENDPOINT_URL" "$POSTGRES_REPO" | tr -s ' '

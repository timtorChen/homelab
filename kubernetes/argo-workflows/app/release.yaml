---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/refs/heads/main/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  namespace: argo-workflows
  name: argo-workflows
spec:
  chart:
    spec:
      sourceRef:
        kind: HelmRepository
        namespace: argo-workflows
        name: argo
      chart: argo-workflows
      version: 0.45.15
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  interval: 1h
  maxHistory: 1
  timeout: 1m0s
  values:
    images:
      tag: v3.6.5
    crds:
      install: true
      keep: true
    server:
      serviceAccount:
        create: true
        name: "argo-workflows-server"
        annotations:
          eks.amazonaws.com/role-arn: arn:aws:iam::262264826613:role/amethyst-argo-workflows
          eks.amazonaws.com/audience: sts.amazonaws.com
      volumes:
        - name: &sso-secret argo-workflows-secret
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: *sso-secret
      # csi driver needs mounting to fetch secret
      volumeMounts:
        - name: *sso-secret
          mountPath: /secret
      deploymentAnnotations:
        secret.reloader.stakater.com/reload: *sso-secret
      authModes: ["sso"]
      sso:
        enabled: true
        issuer: https://oauth.id.jumpcloud.com/
        clientId:
          name: *sso-secret
          key: CLIENT_ID
        clientSecret:
          name: *sso-secret
          key: CLIENT_SECRET
        redirectUrl: https://workflows.timtor.dev/oauth2/callback
        scopes: ["group"]
        sessionExpiry: 168h # 7 days
      ingress:
        enabled: true
        ingressClassName: nginx
        hosts:
          - workflows.timtor.dev
      securityContext: &sc
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        capabilities:
          drop: ["ALL"]
        seccompProfile:
          type: RuntimeDefault
    controller:
      serviceAccount:
        create: true
        name: "argo-workflows-workflow-controller"
      securityContext: *sc
      singleNamespace: false # enable all namespaces
      workflowNamespaces: [] # disable unused roles
      workflowDefaults:
        spec:
          podSpecPatch: | #yaml
            initContainers:
              - name: init
                securityContext: &sc
                  runAsNonRoot: true
                  runAsUser: 8737
                  runAsGroup: 8737
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
                  capabilities:
                    drop: ["ALL"]
                  seccompProfile:
                    type: RuntimeDefault
            containers:
              - name: wait
                securityContext: *sc

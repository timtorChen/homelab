---
# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/refs/heads/main/api/jsonschema/schema.json
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: pvc-backup-to-s3-workflowtemplate
spec:
  entrypoint: main
  arguments:
    parameters:
      - name: pvcName
      - name: volumeSnapshotClass
      - name: storageClassName
      - name: snapshotTimeout
        value: 4h
      - name: cacheStorageClassName
      - name: cacheSize
      - name: resticConfig
  templates:
    - name: main
      steps:
        - - name: create-snapshot
            template: create-snapshot
        - - name: wait-for-snapshot
            template: wait-for-snapshot
        - - name: carete-snapshot-pvc
            template: create-snapshot-pvc
        - - name: create-cache-pvc
            template: create-cache-pvc
          # - name: upload-to-s3
          #   template: upload-to-s3
        # - - name: clean-up
        #     template: clean-up

    - name: create-snapshot
      container:
        image: bitnami/kubectl
        command: ["/bin/sh", "-c"]
        args:
          - |
              MANIFEST="$(cat <<EOF
              apiVersion: snapshot.storage.k8s.io/v1
              kind: VolumeSnapshot
              metadata:
                namespace: "{{workflow.namespace}}"
                name: "{{workflow.name}}"
              spec:
                volumeSnapshotClassName: "{{workflow.parameters.volumeSnapshotClass}}"
                source:
                  persistentVolumeClaimName: "{{workflow.parameters.pvcName}}"
              EOF
              )"
              echo "$MANIFEST" | kubectl create -f -
        securityContext: &sc
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: RuntimeDefault

    - name: wait-for-snapshot
      container:
        image: bitnami/kubectl
        securityContext: *sc
        command: ["/bin/sh", "-c"]
        args:
          - |
              kubectl wait -n "{{workflow.namespace}}" "volumesnapshot/{{workflow.name}}" \
                --for=jsonpath='{.status.readyToUse}=true' \
                --timeout={{workflow.parameters.snapshotTimeout}}

    - name: create-snapshot-pvc
      container:
        image: bitnami/kubectl
        securityContext: *sc
        command: ["/bin/sh", "-c"]
        args:
          - |
              SIZE="$(
                kubectl get -n {{workflow.namespace}} volumesnapshot/{{workflow.name}} \
                -o jsonpath='{.status.restoreSize}'
              )"

              MANIFEST="$(cat <<EOF
              apiVersion: v1
              kind: PersistentVolumeClaim
              metadata:
                namespace: "{{workflow.namespace}}"
                name: "{{workflow.name}}-src"
              spec:
                storageClassName: "{{workflow.parameters.storageClassName}}"
                dataSource:
                  apiGroup: snapshot.storage.k8s.io
                  kind: VolumeSnapshot
                  name: "{{ workflow.name }}"
                resources:
                  requests:
                    storage: "$SIZE"
                accessModes: ["ReadWriteOnce"]
              EOF
              )"
              echo "$MANIFEST" | kubectl create -f -

    - name: create-cache-pvc
      container:
        image: bitnami/kubectl
        securityContext: *sc
        command: ["/bin/sh", "-c"]
        args:
          - |
              MANIFEST="$(cat <<EOF
              apiVersion: v1
              kind: PersistentVolumeClaim
              metadata:
                namespace: "{{workflow.namespace}}"
                name: "{{workflow.parameters.pvcName}}-cache"
              spec:
                storageClassName: "{{workflow.parameters.cacheStorageClassName}}"
                resources:
                  requests:
                    storage: "{{workflow.parameters.cacheSize}}"
                accessModes: ["ReadWriteOnce"]
              EOF
              )"
              echo "$MANIFEST" | kubectl create -f -

    - name: upload-to-s3
      container:
        image: ghcr.io/rustic-rs/rustic:v0.9.5
        securityContext: *sc
        command: ["/rustic"]
        args:
          - backup
          - --init
          - /data
          - --host
          - test

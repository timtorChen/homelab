---
# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/refs/heads/main/api/jsonschema/schema.json
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: backup-pvc-to-s3-workflowtemplate
spec:
  entrypoint: main
  templates:
    # entrypoint
    - name: main
      inputs:
        parameters:
          - name: sourcePvcName
          - name: volumeSnapshotClassName
          - name: storageClassName
          - name: snapshotTimeout
            value: 4h
          - name: cacheStorageClassName
          - name: cacheSize
          - name: rusticConfig
          - name: rusticSecret
      steps:
        - - name: create-snapshot
            template: create-snapshot
            arguments:
              parameters:
                - name: namespace
                  value: "{{workflow.namespace}}"
                - name: name
                  value: "{{workflow.name}}"
                - name: volumeSnapshotClassName
                  value: "{{inputs.parameters.volumeSnapshotClassName}}"
                - name: pvcName
                  value: "{{inputs.parameters.sourcePvcName}}"
        - - name: wait-snapshot
            template: wait-snapshot
            arguments:
              parameters:
                - name: namespace
                  value: "{{workflow.namespace}}"
                - name: name
                  value: "{{workflow.name}}"
                - name: timeout
                  value: "{{inputs.parameters.snapshotTimeout}}"
        - - name: carete-snapshot-pvc
            template: create-snapshot-pvc
            arguments:
              parameters:
                - name: namespace
                  value: "{{workflow.namespace}}"
                - name: name
                  value: "{{workflow.name}}-src"
                - name: storageClassName
                  value: "{{inputs.parameters.storageClassName}}"
                - name: snapshotName
                  value: "{{workflow.name}}"
        - - name: create-cache-pvc
            template: create-cache-pvc
            arguments:
              parameters:
                - name: namespace
                  value: "{{workflow.namespace}}"
                - name: name
                  value: "{{inputs.parameters.sourcePvcName}}-cache"
                - name: storageClassName
                  value: "{{inputs.parameters.cacheStorageClassName}}"
                - name: size
                  value: "{{inputs.parameters.cacheSize}}"
        - - name: rustic-upload
            template: rustic-upload
            arguments:
              parameters:
                - name: config
                  value: "{{inputs.parameters.rusticConfig}}"
                - name: secret
                  value: "{{inputs.parameters.rusticSecret}}"
                - name: dataPvcName
                  value: "{{workflow.name}}-src"
          - name: rustic-forget
            template: rustic-forget
            arguments:
              parameters:
                - name: config
                  value: "{{inputs.parameters.rusticConfig}}"
                - name: secret
                  value: "{{inputs.parameters.rusticSecret}}"
                - name: dataPvcName
                  value: "{{workflow.name}}-src"
        - - name: delete-snapshot-pvc
            template: delete-snapshot-pvc
            continueOn:
              error: true
            arguments:
              parameters:
                - name: namespace
                  value: "{{workflow.namespace}}"
                - name: pvcName
                  value: "{{workflow.name}}-src"
          - name: delete-snapshot
            template: delete-snapshot
            arguments:
              parameters:
                - name: namespace
                  value: "{{workflow.namespace}}"
                - name: snapshotName
                  value: "{{workflow.name}}"

    - name: create-snapshot
      inputs:
        parameters:
          - name: namespace
          - name: name
          - name: volumeSnapshotClassName
          - name: pvcName
      container:
        image: bitnami/kubectl
        command: ["/bin/sh", "-c"]
        args:
          - |
              MANIFEST="$(cat <<EOF
              apiVersion: snapshot.storage.k8s.io/v1
              kind: VolumeSnapshot
              metadata:
                namespace: "{{inputs.parameters.namespace}}"
                name: "{{inputs.parameters.name}}"
              spec:
                volumeSnapshotClassName: "{{inputs.parameters.volumeSnapshotClassName}}"
                source:
                  persistentVolumeClaimName: "{{inputs.parameters.pvcName}}"
              EOF
              )"
              echo "$MANIFEST" | kubectl create -f -
        securityContext: &sc
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: RuntimeDefault

    - name: wait-snapshot
      inputs:
        parameters:
          - name: namespace
          - name: name
          - name: timeout
      container:
        image: bitnami/kubectl
        securityContext: *sc
        command: ["/bin/sh", "-c"]
        args:
          - |
              kubectl wait -n "{{inputs.parameters.namespace}}" "volumesnapshot/{{inputs.parameters.name}}" \
                --for=jsonpath='{.status.readyToUse}=true' \
                --timeout={{inputs.parameters.timeout}}

    - name: create-snapshot-pvc
      inputs:
        parameters:
          - name: namespace
          - name: name
          - name: storageClassName
          - name: snapshotName
      container:
        image: bitnami/kubectl
        securityContext: *sc
        command: ["/bin/sh", "-c"]
        args:
          - |
              SIZE="$(
                kubectl get -n {{inputs.parameters.namespace}} volumesnapshot/{{inputs.parameters.snapshotName}} \
                -o jsonpath='{.status.restoreSize}'
              )"

              MANIFEST="$(cat <<EOF
              apiVersion: v1
              kind: PersistentVolumeClaim
              metadata:
                namespace: "{{inputs.parameters.namespace}}"
                name: "{{inputs.parameters.name}}"
              spec:
                storageClassName: "{{inputs.parameters.storageClassName}}"
                dataSource:
                  apiGroup: snapshot.storage.k8s.io
                  kind: VolumeSnapshot
                  name: "{{inputs.parameters.snapshotName}}"
                resources:
                  requests:
                    storage: "$SIZE"
                accessModes: ["ReadWriteOnce"]
              EOF
              )"
              echo "$MANIFEST" | kubectl create -f -

    - name: create-cache-pvc
      inputs:
        parameters:
          - name: namespace
          - name: name
          - name: storageClassName
          - name: size
      container:
        image: bitnami/kubectl
        securityContext: *sc
        command: ["/bin/sh", "-c"]
        args:
          - |
              MANIFEST="$(cat <<EOF
              apiVersion: v1
              kind: PersistentVolumeClaim
              metadata:
                namespace: "{{inputs.parameters.namespace}}"
                name: "{{inputs.parameters.name}}"
              spec:
                storageClassName: "{{inputs.parameters.storageClassName}}"
                resources:
                  requests:
                    storage: "{{inputs.parameters.size}}"
                accessModes: ["ReadWriteOnce"]
              EOF
              )"
              echo "$MANIFEST" | kubectl apply -f -

    - name: rustic-upload
      inputs:
        parameters:
          - name: dataPvcName
          - name: config
          - name: secret
      container:
        image: ghcr.io/rustic-rs/rustic:v0.9.5
        securityContext: *sc
        command: ["/rustic"]
        args:
          - backup
          - --init
          - /data
          - --host
          - test
        envFrom:
          - secretRef:
              name: "{{inputs.parameters.secret}}"
        volumeMounts:
          - name: data
            mountPath: /data
          - name: config
            subPath: rustic.toml
            mountPath: /rustic.toml
            readOnly: true
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "{{inputs.parameters.dataPvcName}}"
        - name: config
          configMap:
            name: "{{inputs.parameters.config}}"

    - name: rustic-forget
      inputs:
        parameters:
          - name: dataPvcName
          - name: config
          - name: secret
      container:
        image: ghcr.io/rustic-rs/rustic:v0.9.5
        securityContext: *sc
        command: ["/rustic"]
        args:
          - forget
          - --prune
        envFrom:
          - secretRef:
              name: "{{inputs.parameters.secret}}"
        volumeMounts:
          - name: data
            mountPath: /data
          - name: config
            subPath: rustic.toml
            mountPath: /rustic.toml
            readOnly: true
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "{{inputs.parameters.dataPvcName}}"
        - name: config
          configMap:
            name: "{{inputs.parameters.config}}"

    - name: delete-snapshot
      inputs:
        parameters:
          - name: namespace
          - name: snapshotName
      container:
        image: bitnami/kubectl
        securityContext: *sc
        command: ["/bin/sh", "-c"]
        args:
          - |
              echo "delete snapshot"
              kubectl delete -n "{{inputs.parameters.namespace}}" "volumesnapshot/{{inputs.parameters.snapshotName}}"

    - name: delete-snapshot-pvc
      inputs:
        parameters:
          - name: namespace
          - name: pvcName
      container:
        image: bitnami/kubectl
        securityContext: *sc
        command: ["/bin/sh", "-c"]
        args:
          - |
              echo "delete pvc"
              kubectl delete -n "{{inputs.parameters.namespace}}" "persistentvolumeclaims/{{inputs.parameters.pvcName}}"

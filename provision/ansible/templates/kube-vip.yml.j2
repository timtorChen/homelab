---
#- RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-vip
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  name: system:kube-vip-role
rules:
  - apiGroups: [""]
    resources: ["services", "services/status", "nodes"]
    verbs: ["list","get","watch", "update"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["list", "get", "watch", "update", "create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:kube-vip-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kube-vip-role
subjects:
- kind: ServiceAccount
  name: kube-vip
  namespace: kube-system
---
#- Daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-vip
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: kube-vip
  template:
    metadata:
      labels:
        name: kube-vip
    spec:
      hostNetwork: true
      serviceAccountName: kube-vip
      containers:
        - name: kube-vip
          image: ghcr.io/kube-vip/kube-vip:v0.4.2
          imagePullPolicy: Always
          resources: {}
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
                - SYS_TIME
          args:
            - manager
          env:
            # use BPG 
            - name: vip_arp
              value: "false"
            - name: bgp_enable
              value: "true"
            # advertise control plane only
            - name: cp_enable
              value: "true"
            - name: vip_address
              value: "{{ kubevip_advertise_address }}"
            - name: lb_port
              value: "6443"
            - name: svc_enable
              value: "false"
            # binding interface
            - name: vip_interface
              value: "eth0"
            - name: bgp_peeraddress
              value: "{{ kubevip_router_address }}"
            # as bgp routerID needs to be unique on each node (in IPv4 format)
            # kube-vip would find the bgp_routerinterface IP as a routerID for each pod
            - name: bgp_routerinterface
              value: "eth0"
            - name: bgp_peeras
              value: "{{ kubevip_router_as }}"
            - name: bgp_peerpass
              value: "{{ kubevip_router_password }}"
            - name: bgp_as
              value: "{{ kubevip_router_as }}"

      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists